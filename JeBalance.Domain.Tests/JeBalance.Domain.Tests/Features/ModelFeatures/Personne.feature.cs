// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace JeBalance.Domain.Tests.Features.ModelFeatures
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PersonnesFeature : object, Xunit.IClassFixture<PersonnesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Personne.feature"
#line hidden
        
        public PersonnesFeature(PersonnesFeature.FixtureData fixtureData, JeBalance_Domain_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/ModelFeatures", "Personnes", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ajouter une nouvelle personne")]
        [Xunit.TraitAttribute("FeatureTitle", "Personnes")]
        [Xunit.TraitAttribute("Description", "Ajouter une nouvelle personne")]
        public virtual void AjouterUneNouvellePersonne()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ajouter une nouvelle personne", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    testRunner.Given("une base de donnees vide", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Prenom",
                            "Nom",
                            "Type",
                            "Avertissements",
                            "Adresse"});
                table4.AddRow(new string[] {
                            "\"Jean\"",
                            "\"Dupont\"",
                            "\"CALOMNIATEUR\"",
                            "0",
                            "\"12 Rue de Paris, 75001 Paris\""});
#line 5
    testRunner.And("j\'ajoute une personne avec:", ((string)(null)), table4, "And ");
#line hidden
#line 8
    testRunner.Then("la personne est ajoutee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Changer le type d\'une personne")]
        [Xunit.TraitAttribute("FeatureTitle", "Personnes")]
        [Xunit.TraitAttribute("Description", "Changer le type d\'une personne")]
        public virtual void ChangerLeTypeDunePersonne()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Changer le type d\'une personne", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Pr�nom",
                            "Nom",
                            "Type",
                            "Avertissements",
                            "Adresse"});
                table5.AddRow(new string[] {
                            "\"Jean\"",
                            "\"Dupont\"",
                            "\"NONE\"",
                            "0",
                            "\"12 Rue de Paris, 75001 Paris\""});
#line 11
    testRunner.Given("une personne existante dans la base de donnees:", ((string)(null)), table5, "Given ");
#line hidden
#line 14
    testRunner.When("je mets a jour le type de cette personne a \"VIP\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
    testRunner.And("je recherche cette personne dans la base de donnees", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
    testRunner.Then("le type de la personne est changee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Supprimer une personne")]
        [Xunit.TraitAttribute("FeatureTitle", "Personnes")]
        [Xunit.TraitAttribute("Description", "Supprimer une personne")]
        public virtual void SupprimerUnePersonne()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Supprimer une personne", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Pr�nom",
                            "Nom",
                            "Type",
                            "Avertissements",
                            "Adresse"});
                table6.AddRow(new string[] {
                            "\"Jean\"",
                            "\"Dupont\"",
                            "\"CALOMNIATEUR\"",
                            "0",
                            "\"12 Rue de Paris, 75001 Paris\""});
#line 19
    testRunner.Given("une personne existante dans la base de donnees avec:", ((string)(null)), table6, "Given ");
#line hidden
#line 22
    testRunner.When("je supprime cette personne de la base de donnees", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
    testRunner.Then("la personne est supprimee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Recuperer une personne de type \"VIP\"")]
        [Xunit.TraitAttribute("FeatureTitle", "Personnes")]
        [Xunit.TraitAttribute("Description", "Recuperer une personne de type \"VIP\"")]
        public virtual void RecupererUnePersonneDeTypeVIP()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recuperer une personne de type \"VIP\"", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Pr�nom",
                            "Nom",
                            "Type",
                            "Avertissements",
                            "Adresse"});
                table7.AddRow(new string[] {
                            "\"Jean\"",
                            "\"Dupont\"",
                            "\"VIP\"",
                            "0",
                            "\"12 Rue de Paris, 75001 Paris\""});
#line 26
    testRunner.Given("une personne de type \"VIP\" existante dans la base de donnees avec:", ((string)(null)), table7, "Given ");
#line hidden
#line 29
    testRunner.When("je recupere cette personne de la base de donnees", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
    testRunner.Then("je recois la personne de type \"VIP\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Rechercher des personnes specifiques")]
        [Xunit.TraitAttribute("FeatureTitle", "Personnes")]
        [Xunit.TraitAttribute("Description", "Rechercher des personnes specifiques")]
        public virtual void RechercherDesPersonnesSpecifiques()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Rechercher des personnes specifiques", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Pr�nom",
                            "Nom",
                            "Type",
                            "Avertissements",
                            "Adresse"});
                table8.AddRow(new string[] {
                            "\"Jean\"",
                            "\"Dupont\"",
                            "\"CALOMNIATEUR\"",
                            "2",
                            "\"12 Rue de Paris, 75001 Paris\""});
                table8.AddRow(new string[] {
                            "\"Alice\"",
                            "\"Durand\"",
                            "\"VIP\"",
                            "1",
                            "\"15 Rue de Lyon, 69001 Lyon\""});
                table8.AddRow(new string[] {
                            "\"Marc\"",
                            "\"Lefevre\"",
                            "\"CALOMNIATEUR\"",
                            "0",
                            "\"8 Rue de Marseille, 13001 Marseille\""});
                table8.AddRow(new string[] {
                            "\"Sophie\"",
                            "\"Martin\"",
                            "\"VIP\"",
                            "3",
                            "\"20 Rue de Lille, 59000 Lille\""});
#line 33
    testRunner.Given("une base de donnees contenant plusieurs personnes", ((string)(null)), table8, "Given ");
#line hidden
#line 39
    testRunner.When("je recherche des personnes avec des criteres specifiques", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
    testRunner.Then("je recois les personnes correspondantes selon les criteres specifies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PersonnesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PersonnesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
