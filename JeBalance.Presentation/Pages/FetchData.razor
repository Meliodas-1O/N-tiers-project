@page "/fetchdata"
@using System.Text.Json;
@using Newtonsoft.Json;
<PageTitle>Weather forecast</PageTitle>
@inject IJSRuntime JSRuntime

@using JeBalance.Presentation.Data

<h1>Suivi de dénonciation</h1>

<div>
    <label for="denonciationId">ID de la dénonciation:</label>
    <input type="text" id="denonciationId" @bind="denonciationId" />
    <button @onclick="RechercherDenonciation">Rechercher</button>
</div>

@if (denonciation != null)
{
    <div>
        @if (denonciation.reponse == null)
        {
            <h3>Vous n'avez pas encore de réponse à votre dénonciation. Veuillez patienter encore un peu, s'il vous plaît.</h3>
        }
        else
        {
            <h3>Réponse</h3>
            <p>Date: @formatedReponseTime</p>
            <p>Type de rétribution: @denonciation.reponse.type</p>
            <p>Retribution: @denonciation.reponse.retribution</p>
        }

        <h3>Date de création de la dénonciation</h3>
        <p>Date: @formatedDenonciationTime</p>

        <h3>Informateur</h3>
        <p>Prénom: @denonciation.informateur.prenom</p>
        <p>Nom: @denonciation.informateur.nom</p>
        <p>Adresse: @denonciation.informateur.adresse.numeroVoie @denonciation.informateur.adresse.nomVoie, @denonciation.informateur.adresse.codePostal @denonciation.informateur.adresse.commune</p>

        <h3>Suspect</h3>
        <p>Prénom: @denonciation.suspect.prenom</p>
        <p>Nom: @denonciation.suspect.nom</p>
        <p>Adresse: @denonciation.suspect.adresse.numeroVoie @denonciation.suspect.adresse.nomVoie, @denonciation.suspect.adresse.codePostal @denonciation.suspect.adresse.commune</p>

        <h3>Informations supplémentaires</h3>
        <p>Pays d'évasion: @denonciation.paysEvasion</p>
        <p>Délit: @denonciation.delit</p>
    </div>
}
else
{
    <p>Données de dénonciation non disponibles.</p>
}

@code {
    private string denonciationId;
    private string formatedDenonciationTime;
    private string formatedReponseTime;
    private DenonciationItem denonciation;

    private async Task RechercherDenonciation()
    {
        denonciation = null;
        await LogMessage($"Recherche de la dénonciation avec l'ID : {denonciationId}");
        var httpClient = new HttpClient();
        var response = await httpClient.GetAsync($"https://localhost:7180/api/denonciations/{denonciationId}");

        if (response.IsSuccessStatusCode)
        {
            string content = await response.Content.ReadAsStringAsync();
            denonciation = JsonConvert.DeserializeObject<DenonciationItem>(content);
            await LogMessage($"MDRR recherche de la dénonciation avec l'ID : {content}");
            formatedDenonciationTime = $"{denonciation.horodatage.ToString("dddd, dd MMMM yyyy")}, {denonciation.horodatage.ToString("HH'h' mm")}";
            formatedReponseTime = $"{denonciation.reponse.date.ToString("dddd, dd MMMM yyyy")}, {denonciation.reponse.date.ToString("HH'h' mm")}";
        }
        else
        {
            await LogMessage($"Erreur lors de la recherche de la dénonciation avec l'ID : {denonciationId}");
        }
    }

    private async Task LogMessage(string message)
    {
        await JSRuntime.InvokeVoidAsync("blazorLog", message);
    }
}