// <auto-generated />
using JeBalance.Public.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JeBalance.Public.API.Migrations
{
    [DbContext(typeof(PublicApiDatabaseContext))]
    [Migration("20240124091915_m1")]
    partial class m1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.26");

            modelBuilder.Entity("JeBalance.Domain.Models.Person.Personne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdresseValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NombreAvertissement")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrenomValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TypePersonne")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdresseValue");

                    b.HasIndex("NomValue");

                    b.HasIndex("PrenomValue");

                    b.ToTable("Personnes");
                });

            modelBuilder.Entity("JeBalance.Domain.ValueObjects.Adresse", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.Property<int>("CodePostalValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomCommuneValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomVoieValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumeroVoieValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("Value");

                    b.HasIndex("CodePostalValue");

                    b.HasIndex("NomCommuneValue");

                    b.HasIndex("NomVoieValue");

                    b.HasIndex("NumeroVoieValue");

                    b.ToTable("Adresse");
                });

            modelBuilder.Entity("JeBalance.Domain.ValueObjects.CodePostal", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Value");

                    b.ToTable("CodePostal");
                });

            modelBuilder.Entity("JeBalance.Domain.ValueObjects.Nom", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Value");

                    b.ToTable("Nom");
                });

            modelBuilder.Entity("JeBalance.Domain.ValueObjects.NomCommune", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Value");

                    b.ToTable("NomCommune");
                });

            modelBuilder.Entity("JeBalance.Domain.ValueObjects.NomVoie", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Value");

                    b.ToTable("NomVoie");
                });

            modelBuilder.Entity("JeBalance.Domain.ValueObjects.NumeroVoie", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Value");

                    b.ToTable("NumeroVoie");
                });

            modelBuilder.Entity("JeBalance.Domain.ValueObjects.Prenom", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Value");

                    b.ToTable("Prenom");
                });

            modelBuilder.Entity("JeBalance.Domain.Models.Person.Personne", b =>
                {
                    b.HasOne("JeBalance.Domain.ValueObjects.Adresse", "Adresse")
                        .WithMany()
                        .HasForeignKey("AdresseValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JeBalance.Domain.ValueObjects.Nom", "Nom")
                        .WithMany()
                        .HasForeignKey("NomValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JeBalance.Domain.ValueObjects.Prenom", "Prenom")
                        .WithMany()
                        .HasForeignKey("PrenomValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adresse");

                    b.Navigation("Nom");

                    b.Navigation("Prenom");
                });

            modelBuilder.Entity("JeBalance.Domain.ValueObjects.Adresse", b =>
                {
                    b.HasOne("JeBalance.Domain.ValueObjects.CodePostal", "CodePostal")
                        .WithMany()
                        .HasForeignKey("CodePostalValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JeBalance.Domain.ValueObjects.NomCommune", "NomCommune")
                        .WithMany()
                        .HasForeignKey("NomCommuneValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JeBalance.Domain.ValueObjects.NomVoie", "NomVoie")
                        .WithMany()
                        .HasForeignKey("NomVoieValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JeBalance.Domain.ValueObjects.NumeroVoie", "NumeroVoie")
                        .WithMany()
                        .HasForeignKey("NumeroVoieValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodePostal");

                    b.Navigation("NomCommune");

                    b.Navigation("NomVoie");

                    b.Navigation("NumeroVoie");
                });
#pragma warning restore 612, 618
        }
    }
}
